{"version":3,"sources":["webpack:///src/app/pages/task/task.service.ts","webpack:///src/app/pages/task/task.module.ts","webpack:///src/app/pages/task/task-routing.module.ts","webpack:///src/app/pages/task/task.component.html","webpack:///src/app/pages/task/task.component.ts"],"names":["TaskService","api","dataSource","data$","asObservable","paginationSource","pagination$","type","page","pageSize","url","get","pipe","res","next","data","paginator","meta","pagination","current_page","per_page","providedIn","TaskModule","declarations","imports","routes","path","component","TaskRoutingModule","forChild","exports","TaskComponent","apiService","taskService","auth","currentPage","table","rows","typeData","name","user$","currentUserSubject","fetch","subscribe","getData","toPromise","task","body","item_type","item_id","hash_id","action_type","post","console","log","selector","templateUrl","styleUrls"],"mappings":"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","file":"task-task-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ApiService } from '@core/services/api.service';\nimport { tap } from 'rxjs/operators';\nimport { PaginatorState } from '../../_metronic/shared/crud-table';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private dataSource = new BehaviorSubject<any>(null);\n  public data$ = this.dataSource.asObservable();\n\n  private paginationSource = new BehaviorSubject<PaginatorState>(null);\n  public pagination$ = this.paginationSource.asObservable();\n\n  constructor(private api: ApiService) {\n  }\n\n  fetch(type: any, page: number = 1, pageSize: number = 50) {\n    let url;\n    switch (type) {\n      case 'share_link':\n        url = `/articles?page=${page}&per_page=${pageSize}`;\n        break;\n      case 'join_group':\n        url = `/fbgroups?page=${page}`;\n        break;\n      case 'like_page':\n        url = `/fbpages?page=${page}`;\n        break;\n      case 'interaction_post':\n        url = `/fbposts?page=${page}`;\n        break;\n    }\n    return this.api.get(url).pipe(\n      tap((res: any) => {\n        this.dataSource.next(res.data);\n        const paginator = {\n          ...res.meta.pagination,\n          page: res.meta.pagination.current_page,\n          pageSize: res.meta.pagination.per_page,\n        };\n        this.paginationSource.next(paginator);\n      })\n    );\n  }\n\n  shareArticle(page: number) {\n    return this.api.get(`/articles?page=${page}`).pipe(\n      tap((res: any) => {\n        this.dataSource.next(res.data);\n        this.paginationSource.next(res.meta.pagination);\n      })\n    );\n  }\n\n  joinGroup(page: number) {\n    return this.api.get(`/fbgroups?page=${page}`).pipe(\n      tap((res: any) => {\n        this.dataSource.next(res.data);\n        this.paginationSource.next(res.meta.pagination);\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TaskRoutingModule } from './task-routing.module';\nimport { TaskComponent } from './task.component';\nimport { CRUDTableModule } from '../../_metronic/shared/crud-table';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { InlineSVGModule } from 'ng-inline-svg';\nimport { ShareModule } from 'ngx-sharebuttons';\nimport { SharedAppModule } from '@shared/shared.module';\nimport { TranslationModule } from '../../modules/i18n/translation.module';\n\n@NgModule({\n  declarations: [TaskComponent],\n  imports: [\n    CommonModule,\n    TaskRoutingModule,\n    CRUDTableModule,\n    ReactiveFormsModule,\n    InlineSVGModule,\n    ShareModule,\n    SharedAppModule,\n    TranslationModule\n  ]\n})\nexport class TaskModule {\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TaskComponent } from './task.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TaskComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TaskRoutingModule {\n}\n","<div class=\"d-flex flex-row\">\n  <div class=\"flex-row-auto offcanvas-mobile w-200px w-xxl-275px\">\n    <div class=\"card card-custom card-stretch\">\n      <div class=\"card-body px-5\">\n        <div class=\"navi-section mb-2 font-size-h6 font-weight-bold pb-0 d-flex\">\n          <span>{{ 'TITLE.filter' | translate }}</span>\n          <i class=\"flaticon2-console ml-auto\"></i>\n        </div>\n        <div class=\"navi navi-hover navi-active navi-link-rounded navi-bold navi-icon-center navi-light-icon\">\n          <!--begin:Item-->\n          <div *ngFor=\"let item of typeData\" class=\"navi-item my-2\">\n            <a (click)=\"onSelectType(item.name)\" [ngClass]=\"{'active': item.name === type}\" href=\"#\" class=\"navi-link\">\n              <span class=\"navi-text font-weight-bolder font-size-lg\">\n                {{ 'RESPONSE.' + item.name | translate }}\n              </span>\n            </a>\n          </div>\n          <!--end:Item-->\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"flex-row-fluid ml-lg-8\" *ngIf=\"user$ | async as user\">\n    <div class=\"card card-custom gutter-b mb-0\">\n      <div class=\"card-header\">\n        <div class=\"card-title\">\n          <h3 class=\"card-label\">{{ 'TITLE.tasks_list' | translate }}</h3>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <!-- begin:Table -->\n        <div class=\"table-responsive angular-bootstrap-table\">\n          <table\n                  class=\"table table-head-custom table-vertical-center overflow-hidden\"\n          >\n            <thead>\n            <th>\n              {{ 'TABLE.title' | translate }}\n            </th>\n            <th class=\"text-center\" [style.width.px]=\"100\">\n              {{ 'TABLE.receive' | translate }}\n            </th>\n            <th class=\"text-center\" [style.width.px]=\"100\">\n              {{ 'TABLE.remaining' | translate }}\n            </th>\n            <th class=\"text-center\" [style.width.px]=\"100\">\n              {{ 'TABLE.status' | translate }}\n            </th>\n            <th [style.width.px]=\"100\">\n              {{ 'TABLE.date' | translate }}\n            </th>\n            <th [style.width.px]=\"160\">\n              {{ 'TABLE.actions' | translate }}\n            </th>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let task of this.data$ | async\">\n              <td>\n                <a href=\"{{ task.link }}\" target=\"_blank\">\n                  {{ task.name }}\n                </a>\n              </td>\n              <td class=\"text-center\">{{ task.receive || 0 }}</td>\n              <td class=\"text-center\">{{ task.remain }}/{{ task.budget || 0 }}</td>\n              <td class=\"text-center\">\n                        <span\n                                class=\"label label-lg label-inline\"\n                                [class.label-light-primary]=\"task.status === 0\"\n                                [class.label-light-success]=\"task.status === 1\"\n                                [class.label-mute]=\"task.status === 2\"\n                        >\n                        <ng-container *ngIf=\"task.status == 0\">{{ 'STATUS.open' | translate }}</ng-container>\n                        <ng-container *ngIf=\"task.status == 1\">{{ 'STATUS.shared' | translate }}</ng-container>\n                        <ng-container *ngIf=\"task.status == 2\">{{ 'STATUS.closed' | translate }}</ng-container>\n                      </span>\n              </td>\n              <td>{{ task.created_at | date: 'dd/MM/yyyy' }}</td>\n              <td>\n                <a *ngIf=\"task.action_type === 'share_post';else templateButtonAction\"\n                   shareButton=\"facebook\" [url]=\"task.link + '?utm_source=FanLike&utm_medium=' + user.hash_id\"\n                   class=\"btn btn-primary\"\n                   (click)=\"saveAction(task)\">{{ 'RESPONSE.' + task.action_type | translate }}</a>\n                <ng-template #templateButtonAction>\n                  <a [href]=\"task.link + '?utm_source=FanLike&utm_medium=' + user.hash_id\"\n                     target=\"_blank\"\n                     class=\"btn btn-primary\" (click)=\"saveAction(task)\">\n                    {{ 'RESPONSE.' + task.action_type | translate }}\n                  </a>\n                </ng-template>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n        <!-- end: Table -->\n        <app-paginator *ngIf=\"pagination$ | async as pagination\"\n                       class=\"d-flex justify-content-between align-items-center flex-wrap\"\n                       [paginator]=\"pagination\"\n                       [isLoading]=\"isLoading\" (paginate)=\"paginate($event)\"></app-paginator>\n      </div>\n    </div>\n  </div>\n</div>\n\n","import { AfterViewInit, Component, OnInit } from '@angular/core';\nimport { ApiService } from '@core/services/api.service';\nimport { Observable } from 'rxjs';\nimport { TaskService } from '@pages/task/task.service';\nimport { AuthService, UserModel } from '../../modules/auth';\nimport { PaginatorState } from '../../_metronic/shared/crud-table';\nimport { Constants } from '@core/configs/constants';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit, AfterViewInit {\n  type: 'share_link' | 'share_post' | 'join_group' | 'share_page' | 'like_post' | 'like_page' | 'welcome' | 'invite' = 'share_link';\n  currentPage = 1;\n  pageSize = Constants.table.rows;\n  typeData = [\n    {\n      name: 'share_link'\n    },\n    {\n      name: 'join_group'\n    },\n    {\n      name: 'like_page'\n    },\n    {\n      name: 'interaction_post'\n    }\n  ];\n  data: any;\n  data$: Observable<any[]>;\n  user$: Observable<UserModel>;\n\n  // layout\n  isLoading: boolean;\n  paginator: PaginatorState;\n  pagination$: Observable<PaginatorState>;\n\n  constructor(private apiService: ApiService,\n              private taskService: TaskService,\n              private auth: AuthService) {\n    this.data$ = this.taskService.data$;\n    this.pagination$ = this.taskService.pagination$;\n    this.user$ = this.auth.currentUserSubject.asObservable();\n  }\n\n  ngOnInit(): void {\n    this.taskService.fetch(this.type, this.currentPage, this.pageSize).subscribe();\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n\n  async onSelectType(type: any) {\n    if (this.type !== type) {\n      this.type = type;\n      this.currentPage = 1;\n      await this.getData();\n    }\n  }\n\n  async getData() {\n    try {\n      await this.taskService.fetch(this.type, this.currentPage, this.pageSize).toPromise();\n    } catch (e) {\n\n    }\n  }\n\n  async saveAction(task: any) {\n    try {\n      const body = {\n        item_type: task.type,\n        item_id: task.hash_id,\n        type: task.action_type,\n      };\n      const res = await this.apiService.post('/histories', body).toPromise();\n      console.log(res);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  // pagination\n  async paginate(paginator: PaginatorState) {\n    console.log(paginator);\n    this.currentPage = paginator.page;\n    this.pageSize = paginator.pageSize;\n    await this.getData();\n  }\n}\n"]}