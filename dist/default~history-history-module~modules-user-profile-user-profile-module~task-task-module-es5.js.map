{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js"],"names":["PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","body","appendChild","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","_a","parentNode","removeChild","undefined","Clipboard","document","pendingCopy","beginCopy","copy","destroy","ɵfac","Clipboard_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","decorators","args","CDK_COPY_TO_CLIPBOARD_CONFIG","CKD_COPY_TO_CLIPBOARD_CONFIG","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","runOutsideAngular","setTimeout","emit","clearTimeout","forEach","clear","CdkCopyToClipboard_Factory","ɵdir","selectors","hostBindings","CdkCopyToClipboard_HostBindings","rf","ctx","CdkCopyToClipboard_click_HostBindingHandler","inputs","outputs","propDecorators","selector","host","ClipboardModule","ɵmod","ɵinj","ClipboardModule_Factory","ngJitMode","declarations","exports"],"mappings":"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","file":"default~history-history-module~modules-user-profile-user-profile-module~task-task-module-es5.js","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n//# sourceMappingURL=clipboard.js.map"]}