{"version":3,"sources":["webpack:///src/app/pages/payouts/payouts-routing.module.ts","webpack:///src/app/pages/payouts/payouts.component.html","webpack:///src/app/pages/payouts/payouts.component.ts","webpack:///src/app/pages/payouts/payouts.module.ts"],"names":["routes","path","component","PayoutsRoutingModule","forChild","imports","exports","PayoutsComponent","auth","apiService","fb","snackBar","user$","currentUserSubject","asObservable","form","group","type","compose","required","paymentInfo$","paymentGet","pipe","res","data","data$","get","submitted","invalid","console","log","value","user","alert","post","user_id","id","toPromise","open","duration","error","meta","messages","panelClass","selector","templateUrl","styleUrls","PayoutsModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,oB;;;;;cAAAA;;;;2BAAAA,oB;AAAoB,S;AAAA,kBAHtB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGsB,EAFrB,4DAEqB;;;;4HAApBG,oB,EAAoB;AAAA;AAAA,oBAFrB,4DAEqB;AAAA,S;AAFT,O;;;;;wEAEXA,oB,EAAoB;gBAJhC,sDAIgC;iBAJvB;AACRE,mBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,mBAAO,EAAE,CAAC,4DAAD;AAFD,W;AAIuB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ3B;;AACE;;AACA;;AACE;;AAGE;;AAA6D;;;;AAAsC;;AACnG;;AACE;;AACE;;AAAmE;;AAAkB;;AACrF;;AACF;;AAEF;;AACF;;AACA;;AAAiD;AAAA;;AAAA;;AAAA;AAAA;;AAG/C;;AACE;;AACE;;AACI;;AAAQ;;AAAiE;;;;AAA+B;;AAAI;;AAChH;;AACA;;AACE;;AAAoB;;AAAiE;;;;AAA+B;;AAAI;;AAC1H;;AACA;;AACI;;AAAU;;AAAiE;;;;AAA+B;;AAAI;;AAClH;;AACF;;AACF;;AAEA;;AACE;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAsE;;;;AAAiC;;AACjH;;AACF;;AACF;;AACF;;AACA;;;;;;;;;;AAhCmE;;AAAA;;AAGU;;AAAA;;AAMtD;;AAAA,6FAAkB,SAAlB,EAAkB,wFAAlB;;AAKK;;AAAA;;AACH;;AAAA;;AAA8D;;AAAA;;AAE3D;;AAAA;;AACO;;AAAA;;AAA8D;;AAAA;;AAErE;;AAAA;;AACD;;AAAA;;AAA8D;;AAAA;;AAMH;;AAAA;;;;;;AAOpF;;AACE;;AACE;;AAAG;;AAAkD;;AACrD;;AAAG;;AAAiC;;AAAiE;;AAAgB;;AAAI;;AAC3H;;AACF;;;;AALW;;AAGgC;;AAAA;;;;;;AA5C/C;;AACE;;AAuCA;;AAQF;;;;;;;;AA/CiB;;AAAA,2FAAkB,UAAlB,EAAkB,GAAlB;;;;;;AAuFP;;AAAgD;;AAAO;;;;;;AACvD;;AAA6C;;AAAM;;;;;;AACnD;;AAAiD;;AAAM;;;;;;AAf3D;;AACE;;AAAwB;;;;AAA4C;;AACpE;;AACE;;AAA6B;;AAAuB;;AACtD;;AACA;;AAAwB;;AAAsB;;AAC9C;;AACE;;AAMA;;AACA;;AACA;;AACF;;AACA;;AACA;;AAAwB;;;;AAAsE;;AAChG;;;;;;AAlB0B;;AAAA;;AAEO;;AAAA;;AAEP;;AAAA;;AAId;;AAAA,0HAAuD,qBAAvD,EAAuD,0BAAvD,EAAuD,YAAvD,EAAuD,8BAAvD;;AAIO;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAGO;;AAAA;;;;;;AAxC9B;;AACE;;AAGE;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACA;;AACA;;AAoBA;;AACF;;AACF;;;;;;AApC4B;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAKH;;AAAA;;;;;;AA7E/B;;AACE;;AACE;;;;AAiDF;;AACA;;AACE;;AAEE;;;;AA8CF;;AACF;;AAEF;;;;;;AAtG4B;;AAAA;;AAqDhB;;AAAA;;;;UC1CCC,gB;AAaX,kCAAoBC,IAApB,EACoBC,UADpB,EAEoBC,EAFpB,EAGmBC,QAHnB,EAG0C;AAAA;;AAHtB,eAAAH,IAAA,GAAAA,IAAA;AACA,eAAAC,UAAA,GAAAA,UAAA;AACA,eAAAC,EAAA,GAAAA,EAAA;AACD,eAAAC,QAAA,GAAAA,QAAA;AACjB,eAAKC,KAAL,GAAa,KAAKJ,IAAL,CAAUK,kBAAV,CAA6BC,YAA7B,EAAb;AAEA,eAAKC,IAAL,GAAY,KAAKL,EAAL,CAAQM,KAAR,CAAc;AACxBC,gBAAI,EAAE,CAAC,QAAD,EAAW,0DAAWC,OAAX,CAAmB,CAClC,0DAAWC,QADuB,CAAnB,CAAX;AADkB,WAAd,CAAZ;AAMA,eAAKC,YAAL,GAAoB,KAAKZ,IAAL,CAAUa,UAAV,GAAuBC,IAAvB,CAA4B,2DAAI,UAACC,GAAD;AAAA,mBAAcA,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAd;AAAA,WAAJ,CAA5B,CAApB;AACD;;;;iBAED,oBAAQ;AACN,iBAAKC,KAAL,GAAa,KAAKhB,UAAL,CAAgBiB,GAAhB,CAAoB,eAApB,CAAb;AACD;;;iBAEK,oBAAW;;;;;;AACf,2BAAKC,SAAL,GAAiB,IAAjB,C,CAEA;;2BACI,KAAKZ,IAAL,CAAUa,O;;;;;;;;AAId;AACAC,6BAAO,CAACC,GAAR,CAAY,KAAKf,IAAL,CAAUgB,KAAtB;AAEA,2BAAKJ,SAAL,GAAiB,KAAjB;;;;;;;;;AACD;;;iBAEK,mBAAUK,IAAV,EAA2B;;;;;;;AAC/B,2BAAKC,KAAL,GAAa,IAAb;;;AAEmB,6BAAM,KAAKxB,UAAL,CAAgByB,IAAhB,CAAqB,eAArB,EAAsC;AAC3DC,+BAAO,EAAEH,IAAI,CAACI;AAD6C,uBAAtC,EAEpBC,SAFoB,EAAN;;;AAAXd,yB;;AAGN,0BAAIA,GAAG,CAACC,IAAR,EAAc;AACZ,6BAAKb,QAAL,CAAc2B,IAAd,CAAmB,+BAAnB,EAAoD,SAApD,EAA+D;AAC7DC,kCAAQ,EAAE;AADmD,yBAA/D;AAGD;;;;;;;;AAGDV,6BAAO,CAACC,GAAR;AACA,2BAAKnB,QAAL,CAAc2B,IAAd,CAAmB,aAAME,KAAN,CAAYC,IAAZ,CAAiBC,QAApC,EAA8C,OAA9C,EAAuD;AACrDH,gCAAQ,EAAE,IAD2C;AAErDI,kCAAU,EAAE,CAAC,WAAD;AAFyC,uBAAvD;;;;;;;;;AAMH;;;;;;;yBAlEUpC,gB,EAAgB,0H,EAAA,sI,EAAA,2H,EAAA,wI;AAAA,O;;;cAAhBA,gB;AAAgB,oC;AAAA,gB;AAAA,e;AAAA,siD;AAAA;AAAA;ADb7B;;;;;;AAAe;;;;;;;;;;wECaFA,gB,EAAgB;gBAL5B,uDAK4B;iBALlB;AACTqC,oBAAQ,EAAE,aADD;AAETC,uBAAW,EAAE,0BAFJ;AAGTC,qBAAS,EAAE,CAAC,0BAAD;AAHF,W;AAKkB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACb7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UA4BaC,a;;;;;cAAAA;;;;2BAAAA,a;AAAa,S;AAAA,kBAZf,CACP,4DADO,EAEP,4EAFO,EAGP,sEAHO,EAIP,2EAJO,EAKP,6DALO,EAMP,qEANO,EAOP,yEAPO,EAQP,kFARO,EASP,8EATO,CAYe;;;;4HAAbA,a,EAAa;AAAA,yBAbT,mEAaS;AAbO,oBAE7B,4DAF6B,EAG7B,4EAH6B,EAI7B,sEAJ6B,EAK7B,2EAL6B,EAM7B,6DAN6B,EAO7B,qEAP6B,EAQ7B,yEAR6B,EAS7B,kFAT6B,EAU7B,8EAV6B;AAaP,S;AAHL,O;;;;;wEAGRA,a,EAAa;gBAdzB,sDAcyB;iBAdhB;AACRC,wBAAY,EAAE,CAAC,mEAAD,CADN;AAER3C,mBAAO,EAAE,CACP,4DADO,EAEP,4EAFO,EAGP,sEAHO,EAIP,2EAJO,EAKP,6DALO,EAMP,qEANO,EAOP,yEAPO,EAQP,kFARO,EASP,8EATO;AAFD,W;AAcgB,U","file":"payouts-payouts-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PayoutsComponent } from '@pages/payouts/payouts.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PayoutsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PayoutsRoutingModule { }\n","<ng-container *ngIf=\"user$ | async as user\">\n  <div class=\"card card-custom mb-5\">\n    <div class=\"card-body\" *ngIf=\"paymentInfo$ | async as paymentInfo\">\n      <ng-container *ngIf=\"paymentInfo;else templateNoPaymentInfo\">\n        <div class=\"row\">\n        <div class=\"col-sm-6 offset-sm-3\">\n          <div\n                  class=\"rounded d-flex align-items-center justify-content-between text-white position-relative ml-auto px-7 py-5 bgi-no-repeat bgi-size-cover bgi-position-center\"\n                  style=\"background-image: url('/assets/media/svg/shapes/abstract-9.svg');\">\n            <div class=\"font-weight-boldest font-size-h5 text-uppercase\">{{ 'TITLE.total_amount' | translate }}</div>\n            <div class=\"text-right d-flex flex-column\">\n              <div class=\"d-flex align-items-center\">\n                <span class=\"font-weight-boldest font-size-h3 line-height-sm mr-2\">{{ user.balance }}</span>\n                <img width=\"18\" src=\"./assets/media/svg/customs/coin.svg\" alt=\"\">\n              </div>\n              <!--        <span class=\"font-size-sm\">Taxes included</span>-->\n            </div>\n          </div>\n          <form class=\"mt-5\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\"\n                [ngClass]=\"{'ng-was-validated-invalid': submitted}\">\n\n            <div class=\"form-group\">\n              <mat-radio-group formControlName=\"type\">\n                <mat-radio-button [disabled]=\"!paymentInfo.paypal_email\" class=\"d-block mt-2 mr-0\" value=\"paypal\">\n                    Paypal (<a [routerLink]=\"['/user-profile/payment-information']\" href=\"#\">{{ 'BUTTON.edit' | translate }}</a>)\n                </mat-radio-button>\n                <mat-radio-button [disabled]=\"!paymentInfo.bank_account_name\" class=\"d-block mt-2 mr-0\" value=\"bank\">\n                  Bank Wire Transfer (<a [routerLink]=\"['/user-profile/payment-information']\" href=\"#\">{{ 'BUTTON.edit' | translate }}</a>)\n                </mat-radio-button>\n                <mat-radio-button [disabled]=\"!paymentInfo.payoneer_email\" class=\"d-block mt-2 mr-0\" value=\"payoneer\">\n                    Payoneer (<a [routerLink]=\"['/user-profile/payment-information']\" href=\"#\">{{ 'BUTTON.edit' | translate }}</a>)\n                </mat-radio-button>\n              </mat-radio-group>\n            </div>\n\n            <div class=\"form-group text-center\">\n              <button (click)=\"onRequest(user)\" type=\"submit\" class=\"btn btn-primary px-20\">{{ 'BUTTON.submit' | translate }}</button>\n            </div>\n          </form>\n        </div>\n      </div>\n      </ng-container>\n      <ng-template #templateNoPaymentInfo>\n        <ngb-alert [dismissible]=\"false\">\n          <div class=\"text-center h4\">\n            <p>You need to link a payment method to your account.</p>\n            <p>You can add a payment methods in <a [routerLink]=\"['/user-profile/payment-information']\" href=\"#\">Payment Settings</a></p>\n          </div>\n        </ngb-alert>\n      </ng-template>\n    </div>\n  </div>\n  <div class=\"card card-custom mb-5\">\n    <div class=\"card-body\">\n      <!-- begin:Table -->\n      <div *ngIf=\"data$ | async as transactions\" class=\"table-responsive angular-bootstrap-table\">\n        <table\n                class=\"table table-head-custom table-vertical-center overflow-hidden\"\n        >\n          <thead>\n          <th class=\"text-center\">\n            Request date\n          </th>\n          <th class=\"text-center\" [style.width.px]=\"160\">\n            Payment method\n          </th>\n          <th class=\"text-center\" [style.width.px]=\"160\">\n            Amount\n          </th>\n          <th class=\"text-center\" [style.width.px]=\"120\">\n            Status\n          </th>\n          <th class=\"text-center\" [style.width.px]=\"120\">\n            Payout date\n          </th>\n          </thead>\n          <tbody>\n          <tr *ngFor=\"let item of transactions.data\">\n            <td class=\"text-center\">{{ item.date_request | date: 'dd/MM/yyyy' }}</td>\n            <td class=\"text-center\">\n              <span class=\"text-uppercase\">{{ item.payment_type }}</span>\n            </td>\n            <td class=\"text-center\">{{ item.request_sum }}</td>\n            <td class=\"text-center\">\n              <span\n                      class=\"label label-lg label-inline\"\n                      [class.label-light-primary]=\"item.status === 'pending'\"\n                      [class.label-light-success]=\"item.status === 'paid'\"\n                      [class.label-mute]=\"item.status === 'declined'\"\n              >\n              <ng-container *ngIf=\"item.status === 'pending'\">waiting</ng-container>\n              <ng-container *ngIf=\"item.status === 'paid'\">Shared</ng-container>\n              <ng-container *ngIf=\"item.status === 'declined'\">Closed</ng-container>\n            </span>\n            </td>\n            <td class=\"text-center\">{{ item.date_payout ? (item.date_payout | date: 'dd/MM/yyyy') : '-' }}</td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <!-- end: Table -->\n    </div>\n  </div>\n\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService, UserModel } from '../../modules/auth';\nimport { ApiService } from '@core/services/api.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-payouts',\n  templateUrl: './payouts.component.html',\n  styleUrls: ['./payouts.component.scss']\n})\nexport class PayoutsComponent implements OnInit {\n  user$: Observable<UserModel>;\n  data$: Observable<any>;\n  paymentInfo$: Observable<any>;\n\n  submitted: boolean;\n  form: FormGroup;\n\n  alert: {\n    type: string;\n    message: string\n  };\n\n  constructor(private auth: AuthService,\n              private apiService: ApiService,\n              private fb: FormBuilder,\n              public snackBar: MatSnackBar) {\n    this.user$ = this.auth.currentUserSubject.asObservable();\n\n    this.form = this.fb.group({\n      type: ['paypal', Validators.compose([\n        Validators.required\n      ])]\n    });\n\n    this.paymentInfo$ = this.auth.paymentGet().pipe(map((res: any) => res.data[0]));\n  }\n\n  ngOnInit(): void {\n    this.data$ = this.apiService.get('/transactions');\n  }\n\n  async onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n\n    // const { name } = this.form.value;\n    console.log(this.form.value);\n\n    this.submitted = false;\n  }\n\n  async onRequest(user: UserModel) {\n    this.alert = null;\n    try {\n      const res: any = await this.apiService.post('/transactions', {\n        user_id: user.id\n      }).toPromise();\n      if (res.data) {\n        this.snackBar.open('We have received your request', 'Success', {\n          duration: 2000,\n        });\n      }\n\n    } catch (error) {\n      console.log(error);\n      this.snackBar.open(error.error.meta.messages, 'Error', {\n        duration: 2000,\n        panelClass: ['bg-danger']\n      });\n    }\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PayoutsRoutingModule } from './payouts-routing.module';\nimport { PayoutsComponent } from './payouts.component';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { CRUDTableModule } from '../../_metronic/shared/crud-table';\nimport { InlineSVGModule } from 'ng-inline-svg';\nimport { SharedAppModule } from '@shared/shared.module';\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\nimport { TranslationModule } from '../../modules/i18n/translation.module';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n\n@NgModule({\n  declarations: [PayoutsComponent],\n  imports: [\n    CommonModule,\n    PayoutsRoutingModule,\n    MatRadioModule,\n    CRUDTableModule,\n    InlineSVGModule,\n    SharedAppModule,\n    NgbAlertModule,\n    TranslationModule,\n    MatSnackBarModule\n  ]\n})\nexport class PayoutsModule { }\n"]}