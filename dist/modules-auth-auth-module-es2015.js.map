{"version":3,"sources":["./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/registration/registration.component.ts","./src/app/modules/auth/registration/registration.component.html","./src/app/modules/auth/login/login.component.ts","./src/app/modules/auth/login/login.component.html","./src/app/modules/auth/logout/logout.component.ts","./src/app/modules/auth/logout/logout.component.html","./src/app/modules/auth/auth.component.ts","./src/app/modules/auth/auth.component.html","./src/app/modules/auth/forgot-password/forgot-password.component.ts","./src/app/modules/auth/forgot-password/forgot-password.component.html","./node_modules/angularx-social-login/__ivy_ngcc__/fesm2015/angularx-social-login.js","./src/app/modules/auth/auth-routing.module.ts"],"names":[],"mappings":"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;QAQ9B,0DAA8B;QAA9B,iFAA8B;QAQ9B,0DAA8B;QAA9B,iFAA8B;QA0BjB,0DAAwB;QAAxB,mJAAwB;QAS5B,0DAAwC;QAAxC,4GAAwC;;6FD1F5C,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AEhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AAC9B;AACJ;AACb;;AAEM;AACxC;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,sBAAsB,2BAA2B;AACpI;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAa;AAC3C;AACA;AACA,8BAA8B,iDAAY;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gEAAgE,qCAAqC,sDAAe,6BAA6B;AACjJ,0BAA0B,gEAAyB,EAAE,4DAA4D;AACjH;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,sCAAsC;AACxF;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAuB,EAAE,0BAA0B;AAC5E,yBAAyB,8DAAuB,EAAE,iDAAiD,qCAAqC,sDAAe,yBAAyB,EAAE;AAClL;AACA;AACA,YAAY,4DAAY;AACxB,YAAY;AACZ;AACA,KAAK,wCAAwC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE;AAClF;AACA,cAAc,oDAAoD,gEAAyB,qBAAqB,uBAAuB,SAAS,4DAAY,EAAE,EAAE,EAAE,EAAE,EAAE;AACtK,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,MAAM;AACX;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,wBAAwB;AACrH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,kEAAkE,kCAAkC;AACpG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oDAAoD,GAAG,QAAQ;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB,GAAG,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,0BAA0B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6DAA6D,mCAAmC;AAChG;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAE6M;;AAE7M,iD;;;;;;;;;;;;ACr1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACc;AACN;AACQ;AACqB;AACQ;AAC1B;;;AAG1D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6DAAa;QACxB,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,OAAO;gBACnB,SAAS,EAAE,MAAM;aAClB;YACD;gBACE,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,qEAAc;gBACzB,IAAI,EAAE,EAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAC;aAC5C;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,0FAAqB;aACjC;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,kGAAuB;aACnC;YACD;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,wEAAe;aAC3B;YACD,EAAC,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAC;YAClD,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAC;SACrD;KACF;CACF,CAAC;AAMK,MAAM,iBAAiB;;gGAAjB,iBAAiB;4JAAjB,iBAAiB,kBAHnB,CAAE,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAE,EAC/B,4DAAY;mIAEZ,iBAAiB,uFAFjB,4DAAY;6FAEZ,iBAAiB;cAJ7B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAE,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAE;gBAC1C,OAAO,EAAE,CAAE,4DAAY,CAAE;aAC1B","file":"modules-auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LogoutComponent } from './logout/logout.component';\nimport { AuthComponent } from './auth.component';\nimport { TranslationModule } from '../i18n/translation.module';\nimport { SocialLoginModule, SocialAuthServiceConfig } from 'angularx-social-login';\n\nimport {\n  // GoogleLoginProvider,\n  FacebookLoginProvider\n} from 'angularx-social-login';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegistrationComponent,\n    ForgotPasswordComponent,\n    LogoutComponent,\n    AuthComponent,\n  ],\n  imports: [\n    CommonModule,\n    TranslationModule,\n    AuthRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    SocialLoginModule\n  ],\n  providers: [\n    {\n      provide: 'SocialAuthServiceConfig',\n      useValue: {\n        autoLogin: false,\n        providers: [\n          // {\n          //   id: GoogleLoginProvider.PROVIDER_ID,\n          //   provider: new GoogleLoginProvider(\n          //     'clientId'\n          //   )\n          // },\n          {\n            id: FacebookLoginProvider.PROVIDER_ID,\n            provider: new FacebookLoginProvider('223546759563819')\n          }\n        ]\n      } as SocialAuthServiceConfig,\n    }\n  ]\n})\nexport class AuthModule {\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Subscription, Observable } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport { Router } from '@angular/router';\nimport { ConfirmPasswordValidator } from './confirm-password.validator';\nimport { UserModel } from '../_models/user.model';\nimport { first, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss'],\n})\nexport class RegistrationComponent implements OnInit, OnDestroy {\n  registrationForm: FormGroup;\n  hasError: boolean;\n  isLoading$: Observable<boolean>;\n\n  // private fields\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.isLoading$ = this.authService.isLoading$;\n    // redirect to home if already logged in\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.registrationForm.controls;\n  }\n\n  initForm() {\n    this.registrationForm = this.fb.group(\n      {\n        first_name: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100),\n          ]),\n        ],\n        last_name: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100),\n          ]),\n        ],\n        email: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.email,\n            Validators.minLength(3),\n            Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n          ]),\n        ],\n        password: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(100),\n          ]),\n        ],\n        cPassword: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(100),\n          ]),\n        ],\n        agree: [false, Validators.compose([Validators.required])],\n      },\n      {\n        validator: ConfirmPasswordValidator.MatchPassword,\n      }\n    );\n  }\n\n  submit() {\n    this.hasError = false;\n    const result: any = {};\n    Object.keys(this.f).forEach(key => {\n      result[key] = this.f[key].value;\n    });\n\n    console.log(result);\n    const {email, first_name, last_name, password, cPassword} = result;\n    const newUser: any = {\n      email,\n      first_name,\n      last_name,\n      password,\n      password_confirmation: cPassword\n    };\n\n    // const newUser = new UserModel();\n    // newUser.setUser(result);\n    const registrationSubscr = this.authService\n      .registration(newUser)\n      .pipe(\n        first()\n      )\n      .subscribe((user: UserModel) => {\n        console.log('registrationSubscr:', user);\n        if (user) {\n          this.router.navigate(['/']);\n        } else {\n          this.hasError = true;\n        }\n      });\n    this.unsubscribe.push(registrationSubscr);\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\n  }\n}\n","<!--begin::Signup-->\n<div class=\"login-form login-signup\">\n  <!--begin::Form-->\n  <form\n    class=\"form\"\n    novalidate=\"novalidate\"\n    id=\"kt_login_signup_form\"\n    [formGroup]=\"registrationForm\"\n    (ngSubmit)=\"submit()\"\n  >\n    <!--begin::Title-->\n    <div class=\"pb-13 pt-lg-0 pt-5\">\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\n        Sign Up\n      </h3>\n      <p class=\"text-muted font-weight-bold font-size-h4\">\n        Enter your details to create your account\n      </p>\n    </div>\n    <!--end::Title-->\n\n    <!-- begin::Alert error-->\n    <ng-container *ngIf=\"hasError\">\n      <div\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\n      >\n        <div class=\"alert-text\">The registration details are incorrect</div>\n      </div>\n    </ng-container>\n    <!-- end::Alert error-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group form-row\">\n      <div class=\"col-md-6\">\n        <label class=\"font-size-h6 font-weight-bolder text-dark\">First Name</label>\n        <input\n                class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n                type=\"text\"\n                name=\"first_name\"\n                formControlName=\"first_name\"\n                placeholder=\"First name\"\n                autocomplete=\"off\"\n                [ngClass]=\"{\n          'is-invalid': registrationForm.controls['first_name'].invalid\n        }\"\n        />\n        <ng-container\n                [ngTemplateOutlet]=\"formError\"\n                [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'first_name is required',\n          control: registrationForm.controls['first_name']\n        }\"\n        ></ng-container>\n        <ng-container\n                [ngTemplateOutlet]=\"formError\"\n                [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'first_name should have at least 3 symbols',\n          control: registrationForm.controls['first_name']\n        }\"\n        ></ng-container>\n        <ng-container\n                [ngTemplateOutlet]=\"formError\"\n                [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'first_name should have maximum 100 symbols',\n          control: registrationForm.controls['first_name']\n        }\"\n        ></ng-container>\n      </div>\n      <div class=\"col-md-6\">\n        <label class=\"font-size-h6 font-weight-bolder text-dark\">Last Name</label>\n        <input\n                class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n                type=\"text\"\n                name=\"last_name\"\n                formControlName=\"last_name\"\n                placeholder=\"Last name\"\n                autocomplete=\"off\"\n                [ngClass]=\"{\n          'is-invalid': registrationForm.controls['last_name'].invalid\n        }\"\n        />\n        <ng-container\n                [ngTemplateOutlet]=\"formError\"\n                [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'last_name is required',\n          control: registrationForm.controls['last_name']\n        }\"\n        ></ng-container>\n        <ng-container\n                [ngTemplateOutlet]=\"formError\"\n                [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'last_name should have at least 3 symbols',\n          control: registrationForm.controls['last_name']\n        }\"\n        ></ng-container>\n        <ng-container\n                [ngTemplateOutlet]=\"formError\"\n                [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'last_name should have maximum 100 symbols',\n          control: registrationForm.controls['last_name']\n        }\"\n        ></ng-container>\n      </div>\n\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"email\"\n        placeholder=\"Email\"\n        name=\"email\"\n        formControlName=\"email\"\n        autocomplete=\"off\"\n        [ngClass]=\"{ 'is-invalid': registrationForm.controls['email'].invalid }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Email is required',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'email',\n          message: 'Email is invalid',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Email should have at least 3 symbols',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Email should have maximum 360 symbols',\n          control: registrationForm.controls['email']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\n        >Password</label\n      >\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"password\"\n        placeholder=\"Password\"\n        name=\"password\"\n        formControlName=\"password\"\n        autocomplete=\"off\"\n        [ngClass]=\"{\n          'is-invalid': registrationForm.controls['password'].invalid\n        }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Password is required',\n          control: registrationForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Password should have at least 8 symbols',\n          control: registrationForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Password should have maximum 100 symbols',\n          control: registrationForm.controls['password']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\n        >Confirm Password</label\n      >\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"password\"\n        placeholder=\"Confirm password\"\n        name=\"cPassword\"\n        autocomplete=\"off\"\n        formControlName=\"cPassword\"\n        [ngClass]=\"{\n          'is-invalid': registrationForm.controls['cPassword'].invalid\n        }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Confirm Password is required',\n          control: registrationForm.controls['cPassword']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Confirm Password should have at least 8 symbols',\n          control: registrationForm.controls['cPassword']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Confirm Password should have maximum 100 symbols',\n          control: registrationForm.controls['cPassword']\n        }\"\n      ></ng-container>\n      <ng-container\n        *ngIf=\"\n          registrationForm.controls['cPassword'].errors &&\n          registrationForm.controls['cPassword'].errors.ConfirmPassword\n        \"\n      >\n        <div class=\"fv-plugins-message-container\">\n          <div class=\"fv-help-block\">\n            'Passsword' and 'Confirm Password' didn't match.\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"checkbox mb-0\">\n        <input type=\"checkbox\" formControlName=\"agree\" name=\"agree\" />&nbsp;I\n        Agree the&nbsp;<a\n          href=\"https://keenthemes.com/metronic/?page=faq\"\n          target=\"_blank\"\n          >terms and conditions</a\n        >.&nbsp;\n        <span></span>\n      </label>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group d-flex flex-wrap pb-lg-0 pb-3\">\n      <button\n        type=\"submit\"\n        id=\"kt_login_signup_submit\"\n        [disabled]=\"\n          registrationForm.invalid || !registrationForm.controls['agree'].value\n        \"\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\n      >\n        Submit\n      </button>\n      <a\n        routerLink=\"/auth/login\"\n        type=\"button\"\n        id=\"kt_login_signup_cancel\"\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\n      >\n        Cancel\n      </a>\n\n      <ng-container *ngIf=\"isLoading$ | async\">\n        <span class=\"spinner spinner-primary ml-5\"></span>\n      </ng-container>\n    </div>\n    <!--end::Form group-->\n  </form>\n  <!--end::Form-->\n</div>\n<!--end::Signup-->\n\n<ng-template\n  #formError\n  let-control=\"control\"\n  let-message=\"message\"\n  let-validation=\"validation\"\n>\n  <ng-container\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\n  >\n    <div class=\"fv-plugins-message-container\">\n      <div class=\"fv-help-block\">\n        {{ message }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { UserModel } from '../_models/user.model';\nimport { AuthService } from '../_services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FacebookLoginProvider, SocialAuthService } from 'angularx-social-login';\nimport { environment } from '@env/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  appName = environment.appName;\n\n  // KeenThemes mock, change it to:\n  // defaultAuth = {\n  //   email: '',\n  //   password: '',\n  // };\n  defaultAuth: any = {\n    email: '',\n    password: '',\n  };\n  loginForm: FormGroup;\n  hasError: boolean;\n  returnUrl: string;\n  isLoading$: Observable<boolean>;\n\n  // private fields\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private socialAuthService: SocialAuthService,\n  ) {\n    this.isLoading$ = this.authService.isLoading$;\n    // redirect to home if already logged in\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']).then();\n    }\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    // get return url from route parameters or default to '/'\n    this.returnUrl =\n      this.route.snapshot.queryParams['returnUrl'.toString()] || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  initForm() {\n    this.loginForm = this.fb.group({\n      email: [\n        this.defaultAuth.email,\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.minLength(3),\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n        ]),\n      ],\n      password: [\n        this.defaultAuth.password,\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(100),\n        ]),\n      ],\n    });\n  }\n\n  submit() {\n    this.hasError = false;\n    const loginSub = this.authService\n      .login(this.f.email.value, this.f.password.value)\n      .pipe(first())\n      .subscribe((user: UserModel) => {\n        if (user) {\n          this.router.navigate([this.returnUrl]).then();\n        } else {\n          this.hasError = true;\n        }\n      });\n    this.unsubscribe.push(loginSub);\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\n  }\n\n  async signInWithFB(): Promise<void> {\n    const res = await this.socialAuthService.signIn(FacebookLoginProvider.PROVIDER_ID);\n    console.log(res);\n    if (res) {\n      const userRes = await this.authService.fbLogin(res).toPromise();\n      console.log('userRes:', userRes);\n      if (userRes) {\n        await this.router.navigate([this.returnUrl]);\n      } else {\n        this.hasError = true;\n      }\n    }\n  }\n}\n","<!--begin::Signin-->\n<div class=\"login-form login-signin\">\n  <!--begin::Form-->\n  <form\n    class=\"form\"\n    [formGroup]=\"loginForm\"\n    novalidate=\"novalidate\"\n    id=\"kt_login_signin_form\"\n    (ngSubmit)=\"submit()\"\n  >\n    <!--begin::Title-->\n    <div class=\"pb-13 pt-lg-0 pt-5\">\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\n        Welcome to {{ appName }}\n      </h3>\n      <span class=\"text-muted font-weight-bold font-size-h4\"\n        >New Here?\n        <a\n          routerLink=\"/auth/registration\"\n          id=\"kt_login_signup\"\n          class=\"text-primary font-weight-bolder\"\n          >{{ \"AUTH.GENERAL.SIGNUP_BUTTON\" | translate }}</a\n        >\n      </span>\n    </div>\n    <!--end::Title-->\n\n    <!-- begin::Alert info-->\n    <!--{<ng-container *ngIf=\"!hasError\">\n      <div class=\"mb-10 alert alert-custom alert-light-info alert-dismissible\">\n        <div class=\"alert-text\">\n          Use account <strong>{{ defaultAuth.email }}</strong> and password\n          <strong>{{ defaultAuth.password }}</strong> to continue.\n        </div>\n      </div>\n    </ng-container>}-->\n    <!-- end::Alert info-->\n\n    <!-- begin::Alert error-->\n    <ng-container *ngIf=\"hasError\">\n      <div\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\n      >\n        <div class=\"alert-text\">The login details are incorrect</div>\n      </div>\n    </ng-container>\n    <!-- end::Alert error-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\n        type=\"email\"\n        name=\"email\"\n        formControlName=\"email\"\n        autocomplete=\"off\"\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['email'].invalid }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Email is required',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>      \n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'email',\n          message: 'Email is invalid',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minLength',\n          message: 'Email should have at least 3 symbols',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Email should have maximum 360 symbols',\n          control: loginForm.controls['email']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group\">\n      <div class=\"d-flex justify-content-between mt-n5\">\n        <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\n          >Password</label\n        >\n        <a\n          routerLink=\"/auth/forgot-password\"\n          class=\"text-primary font-size-h6 font-weight-bolder text-hover-primary pt-5\"\n          id=\"kt_login_forgot\"\n        >\n          Forgot Password ?\n        </a>\n      </div>\n\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\n        type=\"password\"\n        name=\"password\"\n        autocomplete=\"off\"\n        formControlName=\"password\"\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['password'].invalid }\"\n      />\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Password is required',\n          control: loginForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minlength',\n          message: 'Password should have at least 3 symbols',\n          control: loginForm.controls['password']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Password should have maximum 100 symbols',\n          control: loginForm.controls['password']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n\n    <!--begin::Action-->\n    <div class=\"pb-lg-0 pb-5\">\n      <button\n        type=\"submit\"\n        id=\"kt_login_signin_submit\"\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3\"\n        [disabled]=\"loginForm.invalid\"\n      >\n        Sign In\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"btn btn-light-primary font-weight-bolder px-8 py-4 my-3 font-size-lg\"\n        (click)=\"signInWithFB()\"\n      >\n        <span class=\"svg-icon svg-icon-md\">\n          <img height=\"20\" src=\"./assets/media/svg/social-icons/facebook.svg\" />\n        </span>\n        Sign in with Facebook\n      </button>\n\n      <ng-container *ngIf=\"isLoading$ | async\">\n        <span class=\"spinner spinner-primary ml-5\"></span>\n      </ng-container>\n    </div>\n    <!--end::Action-->\n  </form>\n  <!--end::Form-->\n</div>\n<!--end::Signin-->\n\n<ng-template\n  #formError\n  let-control=\"control\"\n  let-message=\"message\"\n  let-validation=\"validation\"\n>\n  <ng-container\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\n  >\n    <div class=\"fv-plugins-message-container\">\n      <div class=\"fv-help-block\">\n        {{ message }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss'],\n})\nexport class LogoutComponent implements OnInit {\n  constructor(private authService: AuthService) {\n    this.authService.logout();\n  }\n\n  ngOnInit(): void {}\n}\n","<p>logout works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  today: Date = new Date();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"d-flex flex-column flex-root h-100\" id=\"kt_login_wrapper\">\n  <!--begin::Login-->\n  <div class=\"login login-1 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white\" id=\"kt_login\">\n    <!--begin::Aside-->\n    <div class=\"login-aside d-flex flex-column flex-row-auto\" style=\"background-color: #F2C98A;\">\n      <!--begin::Aside Top-->\n      <div class=\"d-flex flex-column-auto flex-column pt-lg-40 pt-15\">\n        <!--begin::Aside header-->\n        <a href=\"#\" class=\"text-center mb-10\">\n          <img src=\"./assets/media/logos/logo-light.png\" class=\"max-h-70px\" alt=\"\"/>\n        </a>\n        <!--end::Aside header-->\n        \n        <!--begin::Aside title-->\n        <h3 class=\"font-weight-bolder text-center font-size-h4 font-size-h1-lg\" style=\"color: #986923;\">\n          Get FREE Like and make MONEY <br> with facebook like now\n        </h3>\n        <!--end::Aside title-->\n      </div>\n      <!--end::Aside Top-->\n      \n      <!--begin::Aside Bottom-->\n      <div class=\"aside-img d-flex flex-row-fluid bgi-no-repeat bgi-position-y-bottom bgi-position-x-center\"\n           style=\"background-image: url('./assets/media/svg/illustrations/login-visual-1.svg')\"></div>\n      <!--end::Aside Bottom-->\n    </div>\n    <!--begin::Aside-->\n    \n    <!--begin::Content-->\n    <div\n        class=\"login-content flex-row-fluid d-flex flex-column justify-content-center position-relative overflow-hidden p-7 mx-auto\">\n      <!--begin::Content body-->\n      <div class=\"d-flex flex-column-fluid flex-center\">\n        <router-outlet></router-outlet>\n      </div>\n      <!--end::Content body-->\n      \n      <!--begin::Content footer-->\n      <!--<div class=\"d-flex justify-content-lg-start justify-content-center align-items-end py-7 py-lg-0\">\n        <a href=\"#\" class=\"text-primary font-weight-bolder font-size-h5\">Terms</a>\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Plans</a>\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Contact Us</a>\n      </div>-->\n      <!--end::Content footer-->\n    </div>\n    <!--end::Content-->\n  </div>\n  <!--end::Login-->\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport { first } from 'rxjs/operators';\n\nenum ErrorStates {\n  NotSubmitted,\n  HasError,\n  NoError,\n}\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n  errorState: ErrorStates = ErrorStates.NotSubmitted;\n  errorStates = ErrorStates;\n  isLoading$: Observable<boolean>;\n\n  // private fields\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService\n  ) {\n    this.isLoading$ = this.authService.isLoading$;\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.forgotPasswordForm.controls;\n  }\n\n  initForm() {\n    this.forgotPasswordForm = this.fb.group({\n      email: [\n        'admin@demo.com',\n        Validators.compose([\n          Validators.required,\n          Validators.email,\n          Validators.minLength(3),\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n        ]),\n      ],\n    });\n  }\n\n  submit() {\n    this.errorState = ErrorStates.NotSubmitted;\n    const forgotPasswordSubscr = this.authService\n      .forgotPassword(this.f.email.value)\n      .pipe(first())\n      .subscribe((result: boolean) => {\n        this.errorState = result ? ErrorStates.NoError : ErrorStates.HasError;\n      });\n    this.unsubscribe.push(forgotPasswordSubscr);\n  }\n}\n","<div class=\"login-form login-forgot\">\n  <!--begin::Form-->\n  <form\n    class=\"form fv-plugins-bootstrap fv-plugins-framework\"\n    novalidate=\"novalidate\"\n    [formGroup]=\"forgotPasswordForm\"\n    (ngSubmit)=\"submit()\"\n    id=\"kt_login_forgot_form\"\n    [ngStyle]=\"{\n      display: errorState === errorStates.NoError ? 'none' : 'block'\n    }\"\n  >\n    <!--begin::Title-->\n    <div class=\"pb-13 pt-lg-0 pt-5\">\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\n        Forgotten Password ?\n      </h3>\n      <p class=\"text-muted font-weight-bold font-size-h4\">\n        Enter your email to reset your password\n      </p>\n    </div>\n    <!--end::Title-->\n\n    <!-- begin::Alert error-->\n    <ng-container *ngIf=\"errorState === errorStates.HasError\">\n      <div\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\n      >\n        <div class=\"alert-text\">The email detail is incorrect</div>\n      </div>\n    </ng-container>\n    <!-- end::Alert error-->\n\n    <!--begin::Form group-->\n    <div class=\"form-group fv-plugins-icon-container has-danger\">\n      <input\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\n        type=\"email\"\n        formControlName=\"email\"\n        placeholder=\"Email\"\n        name=\"email\"\n        autocomplete=\"off\"\n        [ngClass]=\"{\n          'is-invalid': forgotPasswordForm.controls['email'].invalid\n        }\"\n      />\n\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'required',\n          message: 'Email is required',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'email',\n          message: 'Email is invalid',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'minLength',\n          message: 'Email should have at least 3 symbols',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n      <ng-container\n        [ngTemplateOutlet]=\"formError\"\n        [ngTemplateOutletContext]=\"{\n          validation: 'maxLength',\n          message: 'Email should have maximum 360 symbols',\n          control: forgotPasswordForm.controls['email']\n        }\"\n      ></ng-container>\n    </div>\n    <!--end::Form group-->\n    <!--begin::Form group-->\n    <div class=\"form-group d-flex flex-wrap pb-lg-0\">\n      <button\n        type=\"submit\"\n        id=\"kt_login_forgot_submit\"\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\n      >\n        Submit\n      </button>\n      <a\n        routerLink=\"/auth/login\"\n        id=\"kt_login_forgot_cancel\"\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\n      >\n        Cancel\n      </a>\n\n      <ng-container *ngIf=\"isLoading$ | async\">\n        <span class=\"spinner spinner-primary ml-5\"></span>\n      </ng-container>\n    </div>\n    <!--end::Form group-->\n    <div></div>\n  </form>\n  <!--end::Form-->\n\n  <ng-container *ngIf=\"errorState === errorStates.NoError\">\n    <div\n      class=\"card card-custom bgi-no-repeat gutter-b\"\n      style=\"\n        height: 175px;\n        background-color: #4ab58e;\n        background-position: calc(100% + 1rem) bottom;\n        background-size: 25% auto;\n        background-image: url(assets/media/svg/humans/custom-1.svg);\n      \"\n    >\n      <!--begin::Body-->\n      <div class=\"card-body d-flex align-items-center\">\n        <div class=\"py-2\">\n          <h3 class=\"text-white font-weight-bolder mb-3\">Email is correct!</h3>\n          <p class=\"text-white font-size-lg\">\n            Message with 'recovery' instruction<br />\n            has been sent<br />\n          </p>\n          <a\n            routerLink=\"/auth/login\"\n            class=\"swal2-confirm btn font-weight-bold btn-light-primary\"\n          >\n            Ok, got it!\n          </a>\n        </div>\n      </div>\n      <!--end::Body-->\n    </div>\n  </ng-container>\n</div>\n\n<ng-template\n  #formError\n  let-control=\"control\"\n  let-message=\"message\"\n  let-validation=\"validation\"\n>\n  <ng-container\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\n  >\n    <div class=\"fv-plugins-message-container\">\n      <div class=\"fv-help-block\">\n        {{ message }}\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nimport * as ɵngcc0 from '@angular/core';\nclass BaseLoginProvider {\r\n    constructor() { }\r\n    loadScript(id, src, onload, parentElement = null) {\r\n        // get document if platform is only browser\r\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            let signInJS = document.createElement('script');\r\n            signInJS.async = true;\r\n            signInJS.src = src;\r\n            signInJS.onload = onload;\r\n            if (!parentElement) {\r\n                parentElement = document.head;\r\n            }\r\n            parentElement.appendChild(signInJS);\r\n        }\r\n    }\r\n}\n\nclass SocialUser {\r\n}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = { scope: 'email' }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\r\n                    gapi.load('auth2', () => {\r\n                        this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }));\r\n                        this.auth2\r\n                            .then(() => {\r\n                            resolve();\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus(loginStatusOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\r\n        return new Promise((resolve, reject) => {\r\n            if (this.auth2.isSignedIn.get()) {\r\n                let user = new SocialUser();\r\n                const profile = this.auth2.currentUser.get().getBasicProfile();\r\n                const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\r\n                user.id = profile.getId();\r\n                user.name = profile.getName();\r\n                user.email = profile.getEmail();\r\n                user.photoUrl = profile.getImageUrl();\r\n                user.firstName = profile.getGivenName();\r\n                user.lastName = profile.getFamilyName();\r\n                user.response = authResponse;\r\n                const resolveUser = authResponse => {\r\n                    user.authToken = authResponse.access_token;\r\n                    user.idToken = authResponse.id_token;\r\n                    resolve(user);\r\n                };\r\n                if (options.refreshToken) {\r\n                    this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\r\n                }\r\n                else {\r\n                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\r\n                    resolveUser(authResponse);\r\n                }\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            const offlineAccess = options && options.offline_access;\r\n            let promise = !offlineAccess\r\n                ? this.auth2.signIn(signInOptions)\r\n                : this.auth2.grantOfflineAccess(signInOptions);\r\n            promise\r\n                .then((response) => {\r\n                let user = new SocialUser();\r\n                if (response && response.code) {\r\n                    user.authorizationCode = response.code;\r\n                }\r\n                else {\r\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\r\n                    let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\r\n                    let token = authResponse.access_token;\r\n                    let backendToken = authResponse.id_token;\r\n                    user.id = profile.getId();\r\n                    user.name = profile.getName();\r\n                    user.email = profile.getEmail();\r\n                    user.photoUrl = profile.getImageUrl();\r\n                    user.firstName = profile.getGivenName();\r\n                    user.lastName = profile.getFamilyName();\r\n                    user.authToken = token;\r\n                    user.idToken = backendToken;\r\n                    user.response = authResponse;\r\n                }\r\n                resolve(user);\r\n            }, (closed) => {\r\n                reject(closed);\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            let signOutPromise;\r\n            if (revoke) {\r\n                signOutPromise = this.auth2.disconnect();\r\n            }\r\n            else {\r\n                signOutPromise = this.auth2.signOut();\r\n            }\r\n            signOutPromise\r\n                .then((err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/** @dynamic */\r\nclass SocialAuthService {\r\n    constructor(config) {\r\n        this.providers = new Map();\r\n        this.autoLogin = false;\r\n        this._user = null;\r\n        this._authState = new ReplaySubject(1);\r\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\r\n        this.initialized = false;\r\n        this._initState = new AsyncSubject();\r\n        if (config instanceof Promise) {\r\n            config.then((config) => {\r\n                this.initialize(config);\r\n            });\r\n        }\r\n        else {\r\n            this.initialize(config);\r\n        }\r\n    }\r\n    get authState() {\r\n        return this._authState.asObservable();\r\n    }\r\n    get initState() {\r\n        return this._initState.asObservable();\r\n    }\r\n    initialize(config) {\r\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\r\n        const { onError = console.error } = config;\r\n        config.providers.forEach((item) => {\r\n            this.providers.set(item.id, item.provider);\r\n        });\r\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize()))\r\n            .then(() => {\r\n            if (this.autoLogin) {\r\n                const loginStatusPromises = [];\r\n                let loggedIn = false;\r\n                this.providers.forEach((provider, key) => {\r\n                    let promise = provider.getLoginStatus();\r\n                    loginStatusPromises.push(promise);\r\n                    promise\r\n                        .then((user) => {\r\n                        user.provider = key;\r\n                        this._user = user;\r\n                        this._authState.next(user);\r\n                        loggedIn = true;\r\n                    })\r\n                        .catch(console.debug);\r\n                });\r\n                Promise.all(loginStatusPromises).catch(() => {\r\n                    if (!loggedIn) {\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    }\r\n                });\r\n            }\r\n        })\r\n            .catch((error) => {\r\n            onError(error);\r\n        })\r\n            .finally(() => {\r\n            this.initialized = true;\r\n            this._initState.next(this.initialized);\r\n            this._initState.complete();\r\n        });\r\n    }\r\n    refreshAuthToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\r\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .getLoginStatus({ refreshToken: true })\r\n                        .then((user) => {\r\n                        user.provider = providerId;\r\n                        this._user = user;\r\n                        this._authState.next(user);\r\n                        resolve();\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    signIn(providerId, signInOptions) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signIn(signInOptions)\r\n                        .then((user) => {\r\n                        user.provider = providerId;\r\n                        resolve(user);\r\n                        this._user = user;\r\n                        this._authState.next(user);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    signOut(revoke = false) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (!this._user) {\r\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\r\n            }\r\n            else {\r\n                let providerId = this._user.provider;\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signOut(revoke)\r\n                        .then(() => {\r\n                        resolve();\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) { return new (t || SocialAuthService)(ɵngcc0.ɵɵinject('SocialAuthServiceConfig')); };\nSocialAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SocialAuthService, factory: SocialAuthService.ɵfac });\r\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\r\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\r\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\r\nSocialAuthService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: ['SocialAuthServiceConfig',] }] }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialAuthService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: ['SocialAuthServiceConfig']\n            }] }]; }, null); })();\n\nclass SocialLoginModule {\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\r\n        }\r\n    }\r\n    static initialize(config) {\r\n        return {\r\n            ngModule: SocialLoginModule,\r\n            providers: [\r\n                SocialAuthService,\r\n                {\r\n                    provide: 'SocialAuthServiceConfig',\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\nSocialLoginModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocialLoginModule });\nSocialLoginModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SocialLoginModule_Factory(t) { return new (t || SocialLoginModule)(ɵngcc0.ɵɵinject(SocialLoginModule, 12)); }, providers: [\n        SocialAuthService\n    ], imports: [[\n            CommonModule\n        ]] });\r\nSocialLoginModule.ctorParameters = () => [\r\n    { type: SocialLoginModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\r\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialLoginModule, { imports: function () { return [CommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialLoginModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    SocialAuthService\n                ]\n            }]\n    }], function () { return [{ type: SocialLoginModule, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, null); })();\n\n// Simulates login / logout without actually requiring an Internet connection.\r\n//\r\n// Useful for certain development situations.\r\n//\r\n// For example, if you want to simulate the greatest football referee England has ever produced:\r\n//\r\n//  const dummyUser: SocialUser = {\r\n//     id: '0123456789',\r\n//     name: 'Howard Webb',\r\n//     email: 'howard@webb.com',\r\n//     firstName: 'Howard',\r\n//     lastName: 'Webb',\r\n//     authToken: 'dummyAuthToken',\r\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\r\n//     provider: 'DUMMY',\r\n//     idToken: 'dummyIdToken',\r\n//     authorizationCode: 'dummyAuthCode'\r\n// };\r\n//\r\n//  let config = new AuthServiceConfig([\r\n//  { ... },\r\n//  {\r\n//       id: DummyLoginProvider.PROVIDER_ID,\r\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\r\n//   },\r\n//  { ... }\r\n//  ]);\r\nclass DummyLoginProvider extends BaseLoginProvider {\r\n    constructor(dummy) {\r\n        super();\r\n        if (dummy) {\r\n            this.dummy = dummy;\r\n        }\r\n        else {\r\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\r\n        }\r\n        // Start not logged in\r\n        this.loggedIn = false;\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.loggedIn) {\r\n                resolve(this.dummy);\r\n            }\r\n            else {\r\n                reject('No user is currently logged in.');\r\n            }\r\n        });\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = true;\r\n            resolve(this.dummy);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = false;\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\r\nDummyLoginProvider.DEFAULT_USER = {\r\n    id: '1234567890',\r\n    name: 'Mickey Mouse',\r\n    email: 'mickey@mouse.com',\r\n    firstName: 'Mickey',\r\n    lastName: 'Mouse',\r\n    authToken: 'dummyAuthToken',\r\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\r\n    provider: 'DUMMY',\r\n    idToken: 'dummyIdToken',\r\n    authorizationCode: 'dummyAuthCode',\r\n    response: {}\r\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'email,public_profile',\r\n        locale: 'en_US',\r\n        fields: 'name,email,picture,first_name,last_name',\r\n        version: 'v4.0',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.initOptions.locale}/sdk.js`, () => {\r\n                    FB.init({\r\n                        appId: this.clientId,\r\n                        autoLogAppEvents: true,\r\n                        cookie: true,\r\n                        xfbml: true,\r\n                        version: this.initOptions.version,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.getLoginStatus((response) => {\r\n                if (response.status === 'connected') {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${this.initOptions.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            FB.login((response) => {\r\n                if (response.authResponse) {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject('User cancelled login or did not fully authorize.');\r\n                }\r\n            }, options);\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'profile',\r\n        scope_data: {\r\n            profile: { essential: false },\r\n        },\r\n        redirect_uri: location.origin,\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        let amazonRoot = null;\r\n        if (document) {\r\n            amazonRoot = document.createElement('div');\r\n            amazonRoot.id = 'amazon-root';\r\n            document.body.appendChild(amazonRoot);\r\n        }\r\n        window.onAmazonLoginReady = () => {\r\n            amazon.Login.setClientId(this.clientId);\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\r\n                    resolve();\r\n                }, amazonRoot);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            let token = this.retrieveToken();\r\n            if (token) {\r\n                amazon.Login.retrieveProfile(token, (response) => {\r\n                    if (response.success) {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.response = response.profile;\r\n                        resolve(user);\r\n                    }\r\n                    else {\r\n                        reject(response.error);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            amazon.Login.authorize(options, (authResponse) => {\r\n                if (authResponse.error) {\r\n                    reject(authResponse.error);\r\n                }\r\n                else {\r\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.authToken = authResponse.access_token;\r\n                        user.response = response.profile;\r\n                        this.persistToken(authResponse.access_token);\r\n                        resolve(user);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                amazon.Login.logout();\r\n                this.clearToken();\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                reject(err.message);\r\n            }\r\n        });\r\n    }\r\n    persistToken(token) {\r\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\r\n    }\r\n    retrieveToken() {\r\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n    clearToken() {\r\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n}\r\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        fields: 'photo_max,contacts',\r\n        version: '5.124',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\r\n        this.VK_API_GET_USER = 'users.get';\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\r\n                    VK.init({\r\n                        apiId: this.clientId,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            VK.Auth.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    signInInternal(resolve, reject) {\r\n        VK.Auth.login((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    getUser(userId, token, resolve) {\r\n        VK.Api.call(this.VK_API_GET_USER, {\r\n            user_id: userId,\r\n            fields: this.initOptions.fields,\r\n            v: this.initOptions.version,\r\n        }, (userResponse) => {\r\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\r\n        });\r\n    }\r\n    getLoginStatusInternal(resolve, reject) {\r\n        VK.Auth.getLoginStatus((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    createUser(response) {\r\n        const user = new SocialUser();\r\n        user.id = response.id;\r\n        user.name = `${response.first_name} ${response.last_name}`;\r\n        user.photoUrl = response.photo_max;\r\n        user.authToken = response.token;\r\n        return user;\r\n    }\r\n}\r\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nvar ProtocolMode;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(ProtocolMode || (ProtocolMode = {}));\r\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\r\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\r\nclass MicrosoftLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = {\r\n            authority: COMMON_AUTHORITY,\r\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\r\n            knownAuthorities: [],\r\n            protocolMode: ProtocolMode.AAD,\r\n            clientCapabilities: [],\r\n            cacheLocation: 'sessionStorage'\r\n        };\r\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.1.0/js/msal-browser.js', () => {\r\n                var _a;\r\n                try {\r\n                    const config = {\r\n                        auth: {\r\n                            clientId: this.clientId,\r\n                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\r\n                            authority: this.initOptions.authority,\r\n                            knownAuthorities: this.initOptions.knownAuthorities,\r\n                            protocolMode: this.initOptions.protocolMode,\r\n                            clientCapabilities: this.initOptions.clientCapabilities\r\n                        },\r\n                        cache: !this.initOptions.cacheLocation ? null : {\r\n                            cacheLocation: this.initOptions.cacheLocation\r\n                        }\r\n                    };\r\n                    this._instance = new msal.PublicClientApplication(config);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getSocialUser(loginResponse) {\r\n        return new Promise((resolve, reject) => {\r\n            //After login, use Microsoft Graph API to get user info\r\n            let meRequest = new XMLHttpRequest();\r\n            meRequest.onreadystatechange = () => {\r\n                if (meRequest.readyState == 4) {\r\n                    try {\r\n                        if (meRequest.status == 200) {\r\n                            let userInfo = JSON.parse(meRequest.responseText);\r\n                            let user = new SocialUser();\r\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\r\n                            user.id = loginResponse.idToken;\r\n                            user.authToken = loginResponse.accessToken;\r\n                            user.name = loginResponse.idTokenClaims.name;\r\n                            user.email = loginResponse.account.username;\r\n                            user.idToken = loginResponse.idToken;\r\n                            user.response = loginResponse;\r\n                            user.firstName = userInfo.givenName;\r\n                            user.lastName = userInfo.surname;\r\n                            resolve(user);\r\n                        }\r\n                        else {\r\n                            reject(`Error retrieving user info: ${meRequest.status}`);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                    }\r\n                }\r\n            };\r\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\r\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\r\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\r\n            try {\r\n                meRequest.send();\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const accounts = this._instance.getAllAccounts();\r\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\r\n                const loginResponse = yield this._instance.ssoSilent({\r\n                    scopes: this.initOptions.scopes,\r\n                    loginHint: accounts[0].username\r\n                });\r\n                return yield this.getSocialUser(loginResponse);\r\n            }\r\n            else {\r\n                throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\r\n            }\r\n        });\r\n    }\r\n    signIn() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const loginResponse = yield this._instance.loginPopup({\r\n                scopes: this.initOptions.scopes\r\n            });\r\n            return yield this.getSocialUser(loginResponse);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const accounts = this._instance.getAllAccounts();\r\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\r\n                //TODO: This redirects to a Microsoft page, then sends us back to redirect_uri... this doesn't seem to match other providers\r\n                //Open issues:\r\n                // https://github.com/abacritt/angularx-social-login/issues/306\r\n                // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/2563\r\n                yield this._instance.logout({\r\n                    account: accounts[0],\r\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n\n//# sourceMappingURL=angularx-social-login.js.map","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {AuthComponent} from './auth.component';\nimport {LoginComponent} from './login/login.component';\nimport {RegistrationComponent} from './registration/registration.component';\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\nimport {LogoutComponent} from './logout/logout.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'login',\n        pathMatch: 'full'\n      },\n      {\n        path: 'login',\n        component: LoginComponent,\n        data: {returnUrl: window.location.pathname}\n      },\n      {\n        path: 'registration',\n        component: RegistrationComponent\n      },\n      {\n        path: 'forgot-password',\n        component: ForgotPasswordComponent\n      },\n      {\n        path: 'logout',\n        component: LogoutComponent\n      },\n      {path: '', redirectTo: 'login', pathMatch: 'full'},\n      {path: '**', redirectTo: 'login', pathMatch: 'full'},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AuthRoutingModule {}\n"],"sourceRoot":"webpack:///"}